# -*- coding: utf-8 -*-
"""dl_data_automation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19oE75Htx-XC75o_MdKhTJV72JZ2w5aTG
"""


# !pip install transformers
# !pip install emoji
from transformers import DistilBertTokenizerFast, TFDistilBertForSequenceClassification
import numpy as np
import pandas as pd
import keras
import tensorflow as tf
import emoji

# Load saved model
# model = keras.models.load_model("lstm_model")
model = TFDistilBertForSequenceClassification.from_pretrained("distilbert-base-uncased", num_labels=3)
model.load_weights("distilbert_model")

# Read Comments in csv file
df = pd.read_csv("predict_sentiments.csv") # predict_sentiments.csv is the file from user input (without sentiment prediction), feel free to change the file name!
comments = df["comments"].to_numpy()

# Convert emojis to respective text meanings
for i in range(len(comments)):
  comments[i] = emoji.demojize(comments[i])
  translate_table = str.maketrans({'_': ' ', ':': ' '})
  comments[i] = comments[i].translate(translate_table)

# # For LSTM model
# maxWord = 101
# t = keras.preprocessing.text.Tokenizer()
# t.fit_on_texts(comments)
# vocab_size = len(t.word_index) + 1
# encoded_comments = t.texts_to_sequences(comments)
# padded_comments = keras.preprocessing.sequence.pad_sequences(encoded_comments, maxlen=maxWord, padding='post')

# For Distil-Bert model
tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')
predictions = []
for comment in comments:
  input = tokenizer.encode(comment, truncation=True, padding=True, return_tensors="tf")
  output = model.predict(input)[0]
  prediction = tf.nn.softmax(output, axis=1).numpy()[0]
  predictions.append(np.argmax(prediction))

# # Use trained model to predict new comments
# predictions = model.predict(padded_comments)

sentiments = []
sentimentDict = {0: 'Positive', 1: 'Neutral', 2: 'Negative'}
for i in range(len(predictions)):
  # sentiments.append(sentimentDict[np.argmax(predictions[i])])
  sentiments.append(sentimentDict[predictions[i]])

df["sentiments"] = sentiments

# Generate csv file containing predicted sentiments for data visualization
df.to_csv("predict_sentiments_result.csv")